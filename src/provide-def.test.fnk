{describe, it, expect, mock, mock_fn} = import '@fink/jest/test.fnk'
{to_equal} = import '@fink/jest/test.fnk'
{encode} = import '@fink/std-lib/str.fnk'

{parse} = import '@fink/larix/parser.fnk'


mock
  'vscode'
  fn: rec:
    Uri: rec:
      joinPath: fn ...join_path: {join_path}

    Position: mock_fn fn ...pos: {pos}
    Range: mock_fn fn ...range: {range}
    Location: mock_fn fn ...location: {location}

    languages: rec:
      registerDefinitionProvider: mock_fn ()

    workspace: rec:
      fs: rec:
        stat: fn uri:
          match uri:
            {join_path: [..., '@fink/std-lib/str.fnk']}: {type: 0}
            else: {type: 1}

        readFile: fn: encode '
          Spam = fn: "ham"
          shrub = fn: "ni"
          '
  {virtual: true}


{languages} = import 'vscode'
{add_definition_provider} = import './provide-def.fnk'



async_parse = fn doc:
  await parse
    await doc.getText _
    '${doc.uri}'



ctx = rec:
  subscriptions: rec:
    push: mock_fn ()



document = rec:
  getText: fn: "
    {is_str} = import '@fink/std-lib/str.fnk'
    {Spam, shrub} = import './foobar.fnk'

    foo = 1234
    log foo
    ham = 'ni'

    <Spam ham ni=123/>

    shrub'foobar'
    "
  uri: {test: 'test-uri:test.fnk'}
  languageId: 'fink'



describe 'definition provider', fn:

  it 'provides definition of ident', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 4, character: 5}

    expect
      await provider.provideDefinition document, pos
      to_equal seq:
        rec: location: seq:
          {test: 'test-uri:test.fnk'}
          {range: [{pos: [3, 0]}, {pos: [3, 3]}]}


  it 'provides definition of jsx elem', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 7, character: 2}

    expect
      await provider.provideDefinition document, pos
      to_equal seq:
        rec: location: seq:
          {join_path: [{test: 'test-uri:test.fnk'}, '..', './foobar.fnk']}
          {range: [{pos: [0, 0]}, {pos: [0, 4]}]}


  it 'provides definition of jsx short attr', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 7, character: 8}

    expect
      await provider.provideDefinition document, pos
      to_equal seq:
        rec: location: seq:
          {test: 'test-uri:test.fnk'}
          {range: [{pos: [5, 0]}, {pos: [5, 3]}]}


  it 'provides definition of jsx attr', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 7, character: 12}

    expect
      await provider.provideDefinition document, pos
      to_equal []


  it 'provides definition for template tag', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 9, character: 2}

    expect
      await provider.provideDefinition document, pos
      to_equal seq:
        rec: location: seq:
          {join_path: [{test: 'test-uri:test.fnk'}, '..', './foobar.fnk']}
          {range: [{pos: [1, 0]}, {pos: [1, 5]}]}


  it 'provides definition for module', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 1, character: 30}

    expect
      await provider.provideDefinition document, pos
      to_equal seq:
        rec:
          location: seq:
            rec:
              join_path: seq:
                {test: 'test-uri:test.fnk'}
                '..'
                './foobar.fnk'

            {range: [{pos: [0, 1]}, {pos: [0, 1]}]}
          originSelectionRange:
            {range: [{pos: [1, 24]}, {pos: [1, 36]}]}



 it 'provides no definition', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 3, character: 8}

    expect
      await provider.provideDefinition document, pos
      to_equal []


  it 'provides no definition for module', fn:
    add_definition_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDefinitionProvider

    pos = {line: 0, character: 3}

    expect
      await provider.provideDefinition document, pos
      to_equal seq:
        rec: location: seq:
          {test: 'test-uri:test.fnk'}
          {range: [{pos: [0, 1]}, {pos: [0, 7]}]}



