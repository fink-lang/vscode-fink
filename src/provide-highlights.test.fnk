{describe, it, expect, mock, mock_fn} = import '@fink/jest/test.fnk'
{to_equal} = import '@fink/jest/test.fnk'

{parse} = import '@fink/larix/parser.fnk'


mock
  'vscode'
  fn: rec:
    Position: mock_fn fn ...pos: {pos}
    Range: mock_fn fn ...range: {range}
    Location: mock_fn fn ...location: {location}
    DocumentHighlight: mock_fn fn ...highlight: {highlight}
    DocumentHighlightKind: rec:
      Write: 'test-write'
      Read: 'test-read'
      Text: 'test-text'

    languages: rec:
      registerDocumentHighlightProvider: mock_fn _

  {virtual: true}


{languages} = import 'vscode'

{add_highlights_provider} = import './provide-highlights.fnk'


async_parse = fn doc:
  await parse
    doc.getText _
    '${doc.uri}'

ctx = rec:
  subscriptions: rec:
    push: mock_fn _

document = rec:
  getText: fn: "
    foo = '123'
    bar = foo + 456
    spam = fn foo:
      log foo, bar

    Shrub = fn: false
    <Shrub bar spam='ni'/>
    "
  uri: {test: 'test-uri:test.fnk'}
  languageId: 'fink'

describe 'highlights provider', fn:

  it 'provides highlight locations of ident', fn:
    add_highlights_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentHighlightProvider

    pos = {line: 1, character: 7}

    expect
      await provider.provideDocumentHighlights document, pos
      to_equal list:
        rec: highlight: list:
          {range: [{pos: [0, 0]}, {pos: [0, 3]}]}
          'test-write'

        rec: highlight: list:
          {range: [{pos: [1, 6]}, {pos: [1, 9]}]}
          'test-read'


  it 'provides highlight locations of jsx elems', fn:
    add_highlights_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentHighlightProvider

    pos = {line: 6, character: 3}

    expect
      await provider.provideDocumentHighlights document, pos
      to_equal list:
        rec: highlight: list:
          {range: [{pos: [5, 0]}, {pos: [5, 5]}]}
          'test-write'

        rec: highlight: list:
          {range: [{pos: [6, 1]}, {pos: [6, 6]}]}
          'test-read'


  it 'provides highlight locations of jsx short attr', fn:
    add_highlights_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentHighlightProvider

    pos = {line: 6, character: 8}

    expect
      await provider.provideDocumentHighlights document, pos
      to_equal list:
        rec: highlight: list:
          {range: [{pos: [1, 0]}, {pos: [1, 3]}]}
          'test-write'

        rec: highlight: list:
          {range: [{pos: [3, 11]}, {pos: [3, 14]}]}
          'test-read'

        rec: highlight: list:
          {range: [{pos: [6, 7]}, {pos: [6, 10]}]}
          'test-read'


  it 'provides highlight location for str', fn:
    add_highlights_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentHighlightProvider

    pos = {line: 0, character: 7}

    expect
      await provider.provideDocumentHighlights document, pos
      to_equal list:
        rec: highlight: list:
          {range: [{pos: [0, 6]}, {pos: [0, 11]}]}
          'test-text'


  it 'provides no highlights for other', fn:
    add_highlights_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentHighlightProvider

    pos = {line: 1, character: 14}

    expect
      await provider.provideDocumentHighlights document, pos
      to_equal []

