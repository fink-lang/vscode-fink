{describe, it, expect, mock, mock_fn} = import '@fink/jest/test.fnk'
{to_match_snapshot} = import '@fink/jest/test.fnk'


mock
  'vscode'
  fn: dict:
    CompletionItem: mock_fn fn ...completion: {completion}
    CompletionItemKind: dict:
      Reference: 'test-ref'
      Constant: 'test-const'
      Function: 'test-func'
      Struct: 'test-struct'
      Text: 'test-text'

    SnippetString: mock_fn fn ...snippet: {snippet}
    MarkdownString: mock_fn fn ...markdown: dict:
      markdown
      appendCodeblock: mock_fn fn ...args:
        markdown.push args

    languages: dict:
      registerCompletionItemProvider: mock_fn ()

  {virtual: true}


{languages} = import 'vscode'
{parse} = import '@fink/larix/parser.fnk'

{add_completion_provider} = import './provide-compl.fnk'


async_parse = fn doc:
  await parse
    doc.getText ()
    '${doc.uri}'


ctx = dict:
  subscriptions: dict:
    push: mock_fn ()


document = dict:
  getText: fn: "
    {ni} = import './ni.fnk'
    foo = {bar: 1234}
    bar = 'spam'

    shrub = fn spam:
      fn ni:
        ni
      shr
    na = 567
    "
  uri: {test: 'test-uri:test.fnk'}
  languageId: 'fink'


describe 'completion provider', fn:

  it 'provides completions', fn:
    add_completion_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerCompletionItemProvider

    pos = {line: 7, character: 5}

    completions = await provider.provideCompletionItems document, pos

    expect
      completions
      to_match_snapshot
