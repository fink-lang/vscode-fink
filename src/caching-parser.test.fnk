{describe, it, expect, mock, mock_fn, to_equal} = import '@fink/jest/test.fnk'
{length} = import '@fink/std-lib/iter.fnk'


mock
  # TODO: @fink/jest should allow .fnk ext
  '@fink/larix/parser.js'
  fn: rec:
    parse: mock_fn fn ...parse: {parse}
  {virtual: true}

mock
  'vscode'
  fn: rec:
    workspace: rec:
      onDidCloseTextDocument: mock_fn _
  {virtual: true}


{workspace} = import 'vscode'
{parse} = import '@fink/larix/parser.fnk'
{caching_parser} = import './caching-parser.fnk'



describe 'caching parser', fn:

  it 'parses only once', fn:
    doc = rec:
      getText: fn: 'test-code'
      uri: {toString: fn: 'test-uri:test.fnk'}
      version: 0

    async_parse = caching_parser _

    result1 = async_parse doc
    result2 = async_parse doc

    await result1
    await result2

    expect
      length parse.mock.calls
      to_equal 1

    expect
      result1 == result2
      to_equal true


  it 'parses when version changes', fn:
    doc1 = rec:
      getText: fn: 'test-code'
      uri: {toString: fn: 'test-uri:test.fnk'}
      version: 0

    doc2 = {...doc1, version: 2}

    async_parse = caching_parser _

    result1 = async_parse doc1
    result2 = async_parse doc2

    await result1
    await result2

    expect
      length parse.mock.calls
      to_equal 2

    expect
      result1 == result2
      to_equal false

    expect
      await result1
      to_equal
        {parse: ['test-code', 'test-uri:test.fnk']}


  it 'removes doc from cache when closed', fn:
    doc = rec:
      getText: fn: 'test-code'
      uri: {toString: fn: 'test-uri:test.fnk'}
      version: 0

    async_parse = caching_parser _
    {mock: {calls: [[close_handler]]}} = workspace.onDidCloseTextDocument

    result1 = async_parse doc
    await result1
    close_handler doc

    result2 = async_parse doc
    await result2

    expect
      length parse.mock.calls
      to_equal 2

    expect
      result1 == result2
      to_equal false



