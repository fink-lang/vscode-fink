{describe, it, expect, mock, mock_fn} = import '@fink/jest/test.fnk'
{was_not_called, was_called_with} = import '@fink/jest/test.fnk'

{encode} = import '@fink/std-lib/str.fnk'
{parallel} = import '@fink/std-lib/async.fnk'

{parse} = import '@fink/larix/parser.fnk'


mock_diags = rec:
  set: mock_fn _


mock
  'vscode'
  fn: rec:
    Position: mock_fn fn ...pos: {pos}
    Range: mock_fn fn ...range: {range}
    Diagnostic: mock_fn fn ...diagnostic: {diagnostic}

    DiagnosticSeverity: rec:
      Error: 'test-diag-error'

    languages: rec:
      createDiagnosticCollection: mock_fn fn: mock_diags

    workspace: rec:
      onDidChangeTextDocument: mock_fn _
      onDidOpenTextDocument: mock_fn _
      findFiles: mock_fn fn: []
      fs: rec:
        readFile: mock_fn _

  {virtual: true}


{workspace} = import 'vscode'
{add_linter} = import './lint.fnk'


async_parse = fn doc:
  await parse
    await doc.getText _
    '${doc.uri}'


describe 'linter provider', fn:

  it 'provides diagnostics when doc changes', fn:
    add_linter async_parse
    {mock: {calls: [[handler]]}} = workspace.onDidChangeTextDocument

    document = rec:
      getText: fn: '
        foo bar, true, [false, true], false
        spam = <div></div>
        spam = fn ni:
          nu = ni
          ni
        '
      uri: {test: 'test-uri:test.fnk'}
      languageId: 'fink'

    await handler {document}

    expect
      mock_diags.set
      was_called_with document.uri,
        list:
          rec: diagnostic: list:
            {range: [{pos: [0, 0]}, {pos: [0, 3]}]}
            'missing-binding'
            'test-diag-error'

          rec: diagnostic: list:
            {range: [{pos: [0, 4]}, {pos: [0, 7]}]}
            'missing-binding'
            'test-diag-error'

          rec: diagnostic: list:
            {range: [{pos: [2, 0]}, {pos: [2, 4]}]}
            'duplicate-binding'
            'test-diag-error'

          rec: diagnostic: list:
            {range: [{pos: [3, 2]}, {pos: [3, 4]}]}
            'unused-binding'
            'test-diag-error'


  it 'provides diagnostics for workspace files', fn:
    mock_uri = {test: 'test-uri:test.fnk'}

    workspace.findFiles.mockImplementation fn: [mock_uri]

    workspace.fs.readFile.mockImplementation fn:
      await 'delay'
      encode '
        foo bar
        spam = <div></div>
        '
        'utf-8'


    ws_tasks = await add_linter async_parse
    await parallel ws_tasks


    expect
      workspace.findFiles
      was_called_with '**/*.fnk', '**/node_modules/**'

    expect
      mock_diags.set
      was_called_with mock_uri,
        list:
          rec: diagnostic: list:
            {range: [{pos: [0, 0]}, {pos: [0, 3]}]}
            'missing-binding'
            'test-diag-error'
          rec: diagnostic: list:
            {range: [{pos: [0, 4]}, {pos: [0, 7]}]}
            'missing-binding'
            'test-diag-error'


  it 'provides diagnostics when doc opens', fn:
    add_linter async_parse
    {mock: {calls: [[handler]]}} = workspace.onDidOpenTextDocument

    document = rec:
      getText: fn: '
        foo = fn bar, spam:
          spam ['
      uri: {toString: fn: 'test-uri:test.fnk'}
      languageId: 'fink'

    await handler document

    expect
      mock_diags.set
      was_called_with document.uri,
        list:
          rec: diagnostic: list:
            {range: [{pos: [0, 9]}, {pos: [0, 12]}]}
            'unused-binding'
            'test-diag-error'

          rec: diagnostic: list:
            {range: [{pos: [1, 8]}, {pos: [1, 8]}]}
            "test-uri:test.fnk:2:8
             1| foo = fn bar, spam:
             2|   spam [
                        ^

             Expected `,` or indented(>=3) new line or `]`.
            "
            'test-diag-error'


  it 'ignores non-fink files', fn:
    add_linter async_parse
    {mock: {calls: [[handler]]}} = workspace.onDidOpenTextDocument

    document = rec:
      getText: fn: 'foo-bar-spam'
      uri: {toString: fn: 'test-uri:test.foo'}
      languageId: 'foobar'

    await handler document

    expect
      mock_diags.set
      was_not_called



