{MarkdownString, CompletionItem, CompletionItemKind, SnippetString, languages} = import 'vscode'

{new, set_props} = import '@fink/js-interop/reflect.fnk'
{fold_ac, map, filter} = import '@fink/std-lib/iter.fnk'

{walk} = import '@fink/larix/ast/traverse.fnk'
{is_binding_ident, add_parents, add_binding_refs} = import '@fink/larix/ast/analyze.fnk'
{to_larix_pos} = import './loc.fnk'

{is_imported} = import './common.fnk'



doc_md = fn header, code:
  doc = new MarkdownString, header
  doc.appendCodeblock code, 'fink'
  doc

snippet = fn txt: new SnippetString, txt


api = rec:
  match: rec:
    doc: doc_md
      'Return the first result of `test: result` where foo matches `test`.'
      "
        match foo:
          test: result
          {bar: 'spam'}: shrub
          [bar, 'spam']: shrub
          'spam': shrub
          else: ni
      "
    snippet: snippet 'match $1:\n  $2: $3\n  else: $4\n$0'

  pipe: rec:
    doc: doc_md
      'Call each expression in the block with the result of the previous call,
       starting with the pipe arg for the first call.'
      '
        [result] = pipe [1, 2, 3, 4, 5, 6]:
          map fn item:
            item * 2
          filter fn item:
            item > 4

        # == 5
      '
    snippet: snippet 'pipe $1:\n  $2\n$0'

  import: rec:
    doc: doc_md
      'Import a module from the given URI.'
      "
        {foo} = import './spam.fnk'

        async_load = fn:
          {a} = await import './shrub.fnk'
      "
    snippet: snippet "import '$1'\n$0"



comp_item = fn key:
  {(key): {doc, snippet: code_snippet}} = api

  item = new CompletionItem, key, CompletionItemKind.Function

  set_props item, {insertText: code_snippet}
  set_props item, {documentation: doc}
  item


builtins = ['fn']


completions_from_loc = fn ast, pos:
  [compls] = pipe ast:
    walk [?]
    add_parents
    add_binding_refs
    filter fn [expr]: expr.loc.start.line <= pos.line
    filter fn [expr], ,ctx: is_binding_ident expr, ctx

    map fn [expr, parent], , ctx:
      kind = match parent:
        is_imported ?, ctx:
          CompletionItemKind.Reference
        {type: 'assign', right: {op: ? in builtins}}:
          CompletionItemKind.Function
        {type: 'assign', right: {type: 'string'}}:
          CompletionItemKind.Text
        {type: 'assign', right: {type: 'rec'}}:
          CompletionItemKind.Struct
        else:
          CompletionItemKind.Constant

      new CompletionItem, expr.value, kind

    fold_ac [], {}, fn compl, out, , ctx:
      [[...out, compl], , ctx]

  compls



completion_provider = fn async_parse: fn doc, pos:
  ast = await async_parse doc
  completions = completions_from_loc ast, to_larix_pos pos

  list:
    ...completions
    comp_item 'match'
    comp_item 'pipe'
    comp_item 'import'


add_completion_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerCompletionItemProvider
    'fink'
    {provideCompletionItems: completion_provider async_parse}

  subscriptions.push subscr
