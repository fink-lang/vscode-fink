{describe, it, expect, mock, mock_fn} = import '@fink/jest/test.fnk'
{to_equal, was_called_with} = import '@fink/jest/test.fnk'

mock_builder = rec:
  push: mock_fn _
  build: mock_fn fn: 'mock-build'


mock
  'vscode'
  fn: rec:
    Range: mock_fn fn ...range: {range}

    Position: mock_fn fn ...pos: {pos}

    SemanticTokensLegend: mock_fn fn ...args: {mock_legend: args}

    SemanticTokensBuilder: mock_fn fn: mock_builder

    languages: rec:
      registerDocumentSemanticTokensProvider: mock_fn _


    workspace: rec:
      _onDidChangeTextDocument: mock_fn _ # TOOD: needed?

  {virtual: true}


{parse} = import '@fink/larix/parser.fnk'


{languages, SemanticTokensBuilder} = import 'vscode'

{add_sem_tokens_provider} = import './provide-sem-tkn.fnk'


async_parse = fn doc:
  await parse
    doc.getText _
    '${doc.uri}'



describe 'sem token provider', fn:

  it 'provides tokens', fn:
    ctx = rec:
      subscriptions: rec:
        push: mock_fn _

    add_sem_tokens_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentSemanticTokensProvider


    tokens = await provider.provideDocumentSemanticTokens rec:
      getText: fn: "
        foo bar.spam shrub
        bar = 'spam \${ham egg} ni'
        ni = foo.(bar) shrub

        foo = (shrub + ni) * 42

        pipe foo:
          map fn item:
            {items=[123]} = match item:
              [..., ni]: [{na: []}, 123]
            items

          flatten

        {nini, ni: nanu} = {nunu, (foo): bar}
      "

    expect
      SemanticTokensBuilder
      was_called_with {mock_legend: [['function', 'string', 'variable', 'property'], ['readonly']]}

    expect
      mock_builder.push.mock.calls
      to_equal list:
        [{range: [{pos: [0, 0]}, {pos: [0, 3]}]}, 'function']
        [{range: [{pos: [0, 8]}, {pos: [0, 12]}]}, 'function']
        [{range: [{pos: [1, 14]}, {pos: [1, 17]}]}, 'function']
        [{range: [{pos: [2, 9]}, {pos: [2, 10]}]}, 'function']
        [{range: [{pos: [2, 13]}, {pos: [2, 14]}]}, 'function']
        [{range: [{pos: [12, 2]}, {pos: [12, 9]}]}, 'function']
        [{range: [{pos: [7, 2]}, {pos: [7, 5]}]}, 'function']
        [{range: [{pos: [8, 5]}, {pos: [8, 10]}]}, 'property']
        [{range: [{pos: [9, 19]}, {pos: [9, 21]}]}, 'property']
        [{range: [{pos: [14, 1]}, {pos: [14, 5]}]}, 'variable', ['readonly']]
        [{range: [{pos: [14, 7]}, {pos: [14, 9]}]}, 'property']
        [{range: [{pos: [14, 20]}, {pos: [14, 24]}]}, 'variable', ['readonly']]

    expect
      tokens
      to_equal 'mock-build'


  it 'handles errors', fn:
    ctx = rec:
      subscriptions: rec:
        push: mock_fn _

    add_sem_tokens_provider ctx, async_parse
    {mock: {calls: [[, provider]]}} = languages.registerDocumentSemanticTokensProvider


    tokens = await provider.provideDocumentSemanticTokens rec:
      uri: {toString: fn: './test.fnk'}
      getText: fn: '
          foo bar
          ['

    expect
      SemanticTokensBuilder
      was_called_with {mock_legend: [['function', 'string', 'variable', 'property'], ['readonly']]}

    expect
      mock_builder.push.mock.calls
      to_equal list:
        [{range: [{pos: [0, 0]}, {pos: [0, 3]}]}, 'function']

    expect
      tokens
      to_equal 'mock-build'



