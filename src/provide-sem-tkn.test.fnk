{describe, it, expect, mock_fn} = import '@fink/jest'
{to_equal, to_be_called_with} = import '@fink/jest'


mock_builder = dict:
  push: mock_fn()
  build: mock_fn fn: 'mock-build'


jest.mock
  'vscode'
  fn: dict:
    SemanticTokensLegend: mock_fn fn ...args: {mock_legend: args}
    SemanticTokensBuilder: mock_fn fn: mock_builder
    languages: dict:
      registerDocumentSemanticTokensProvider: mock_fn()

  {virtual: true}


{languages, SemanticTokensLegend, SemanticTokensBuilder} = import 'vscode'

{add_sem_tokens_provider, sem_token_legend} = import './provide-sem-tkn'


describe 'sem token provider', fn:

  it 'provides tokens', fn:
    ctx = dict:
      subscriptions: dict:
        push: mock_fn()

    add_sem_tokens_provider ctx
    {mock: {calls: [[, provider]]}} = languages.registerDocumentSemanticTokensProvider


    tokens = provider.provideDocumentSemanticTokens dict:
      getText: fn: `
          foo bar.spam shrub
          bar = 'spam \${ham egg} ni'
          ni = foo.(bar) shrub

          foo = (shrub + ni) * 42

          pipe foo:
            map item:
              items = match item:
                [..., ni]: {na: []}

              ...items
          `

    expect
      SemanticTokensBuilder
      to_be_called_with {mock_legend: [['function', 'string'], []]}

    expect
      mock_builder.push
      to_be_called_with 0, 0, 3, 0

    expect
      mock_builder.push
      to_be_called_with 0, 8, 4, 0

    expect
      mock_builder.push
      to_be_called_with 1, 14, 3, 0

    expect
      mock_builder.push
      to_be_called_with 2, 9, 1, 0

    expect
      mock_builder.push
      to_be_called_with 2, 13, 1, 0

    expect
      tokens
      to_equal 'mock-build'

