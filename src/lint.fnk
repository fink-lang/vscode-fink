{workspace, languages, Diagnostic, DiagnosticSeverity} = import 'vscode'
{length, chain} = import '@fink/std-lib/iter'
{lower_case} = import '@fink/std-lib/str'

{range} = import './loc'
{get_refs, get_decls, decls_by_scope, get_idents, ref_loc} = import './traverse'


get_errors = fn ast:
  idents = get_idents ast
  scopes = decls_by_scope idents
  refs = get_refs idents, scopes

  [...unrefed] = pipe refs:
    filter {decl}:
      match decl:
        {parent: {parent: {expr: {type: 'module'}}}}: false
        else: true

    filter {idents}:
      match idents:
        1 == length ?: true
        else:
          false

    map {decl}:
      ['unused', decl]

  [...undef] = pipe idents:
    filter {expr}:
       match expr:
         {type: 'jsx-elem', name: lower_case expr.name}: false
         else: true

    filter node:
      decls = get_decls node, scopes
      match decls:
        0 == length ?: true
        else: false

    map node:
      ['undefined', node]

  [...unrefed, ...undef]


diagnostic = fn loc, msg, severity:
  rng = range loc
  new Diagnostic rng, msg, severity


process_doc = fn doc, dc, parse:
  {errors, ...ast} = await parse doc

  [...diags] = chain
    pipe get_errors ast:
      map [kind, {expr}]:
        loc = ref_loc expr
        diagnostic loc, kind, DiagnosticSeverity.Error

    pipe errors:
      map {error, token: {loc}}:
        diagnostic loc, error, DiagnosticSeverity.Error

  dc.set doc.uri, diags


handle_doc_change = fn doc, dc, parse:
  match doc:
    {languageId: 'fink'}: process_doc doc, dc, parse
    else: false


add_linter = fn async_parse:
  diags = languages.createDiagnosticCollection 'fink'

  workspace.onDidChangeTextDocument
    fn {document}: handle_doc_change document, diags, async_parse

  workspace.onDidOpenTextDocument
    fn document: handle_doc_change document, diags, async_parse


