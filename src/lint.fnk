{workspace, languages, Diagnostic, DiagnosticSeverity} = import 'vscode'
{fold_ac, map, filter, is_empty, chain} = import '@fink/std-lib/iter.fnk'
{lower_case, decode} = import '@fink/std-lib/str.fnk'
{new} = import '@fink/js-interop/reflect.fnk'

{range} = import './loc.fnk'

{walk} = import '@fink/larix/ast/traverse.fnk'
{get_parent, add_duplicate_bindings, get_refs, add_parents, add_binding_refs} = import '@fink/larix/ast/analyze.fnk'
{is_exported} = import './common.fnk'



as_issues = fn exprs:
  [ , ctx] = exprs | fold_ac false, {bindings:[], refs:{}}, fn exp, , , ctx: [exp, , ctx]

  {refs: {unbound}, bindings, rebindings} = ctx

  [] | chain
    pipe unbound:
      filter fn expr:
        match get_parent expr, ctx:
          {type: 'jsx:elem'}: expr.value != lower_case expr.value
          else: true
      # TODO: map ['missing-binding', ?]
      map fn expr:
        ['missing-binding', expr]

    # TODO map ['duplicate-binding', ?]
    rebindings | map fn expr:
      ['duplicate-binding', expr]

    pipe bindings:
      filter fn expr:
        refs = get_refs expr, ctx
        match refs:
          is_empty ?: not is_exported expr, ctx
          else: false
      # TODO map ['unused-binding', ?]
      map fn expr:
        ['unused-binding', expr]



lint_ast = fn ast:
  pipe [ast]:
    walk
    add_parents
    add_binding_refs
    add_duplicate_bindings
    as_issues



diagnostic = fn loc, msg, severity:
  rng = range loc
  new Diagnostic, rng, msg, severity



process_doc = fn doc, dc, parse:
  {errors, ...ast} = await parse doc
  diags = list:
    ...pipe lint_ast ast:
      map fn [kind, expr]:
        {loc} = expr
        diagnostic loc, kind, DiagnosticSeverity.Error

    ...pipe errors:
      map fn {error, token: {loc}}:
        diagnostic loc, error, DiagnosticSeverity.Error

  dc.set doc.uri, diags
  [diags, errors, ast.exprs]



handle_doc_change = fn doc, dc, parse:
  match doc:
    {languageId: 'fink'}: process_doc doc, dc, parse
    else: false



fake_doc = fn uri: rec:
  uri
  version: 0
  getText: fn:
    data = await workspace.fs.readFile uri
    decode data, 'utf-8'



lint_workspace = fn diags, async_parse:
  files = await workspace.findFiles '**/*.fnk', '**/node_modules/**'

  pipe files:
    map fn uri:
      doc = fake_doc uri
      process_doc doc, diags, async_parse
    [...?]



add_linter = fn async_parse:
  diags = languages.createDiagnosticCollection 'fink'

  workspace.onDidChangeTextDocument
    fn {document}: handle_doc_change document, diags, async_parse

  workspace.onDidOpenTextDocument
    fn document: handle_doc_change document, diags, async_parse

  lint_workspace diags, async_parse


