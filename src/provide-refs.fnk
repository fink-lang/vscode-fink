{languages} = import 'vscode'


{to_larix_pos, doc_range, is_at_loc} = import './loc.fnk'


{walk} = import '@fink/larix/ast/traverse.fnk'
{find_binding, add_parents, add_binding_refs, get_expr_id} = import '@fink/larix/ast/analyze.fnk'




keep_refs_at = fn pos:
  filter [expr]:
    match expr:
      {type: 'ident'}: is_at_loc expr, pos
      else: false



as_bindings = map [expr], , ctx:
  binding = find_binding expr, ctx
  ...match binding:
    false: [[], , ctx]
    else: [[binding], , ctx]



as_refs = fn items:
  [bindings, ctx] = pipe items:
    fold binding, out=[], , ctx={}:
      [[...out, binding], , ctx]

  bindings | map binding:
    refs = ctx.refs.(get_expr_id binding)
    ... [binding, ...refs]



as_doc_locs = fn doc:
  map expr: doc_range doc, expr.loc




provide_refs = fn async_parse: fn doc, vspos:
  ast = await async_parse doc

  pos = to_larix_pos vspos

  [...locs] = pipe ast:
    walk [?]
    add_parents
    add_binding_refs
    keep_refs_at pos
    as_bindings
    as_refs
    as_doc_locs doc
  locs



add_refs_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerReferenceProvider
    'fink'
    {provideReferences: provide_refs async_parse}

  subscriptions.push subscr

