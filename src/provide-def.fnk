{languages, Uri, Location, workspace} = import 'vscode'

{new, set_props} = import '@fink/js-interop/reflect.fnk'

{decode} = import '@fink/std-lib/str.fnk'
{map, with_ctx, filter} = import '@fink/std-lib/iter.fnk'
{parallel} = import '@fink/std-lib/async.fnk'

{walk} = import '@fink/larix/ast/traverse.fnk'
{get_parent, find_binding, add_parents, add_binding_refs} = import '@fink/larix/ast/analyze.fnk'

{to_larix_pos, doc_range, range, is_at_loc} = import './loc.fnk'
{is_imported, get_import} = import './common.fnk'



resolve = fn doc, path:
  Uri.joinPath doc.uri, '..', '${path}'



import_link = fn doc, import_expr:
  {right: {exprs: [path]}} = import_expr
  origin_range = range path.loc

  target = await resolve doc, path.value

  target_range = range {start: {line: 1, column: 1}, end: {line: 1, column: 1}}

  link = new Location, target, target_range

  set_props link, {originSelectionRange: origin_range}
  link



fake_doc = fn uri:
  rec:
    uri
    version: '0'
    getText: fn:
      data = await workspace.fs.readFile uri
      decode data, 'utf-8'



imported_decl = fn async_parse, doc, expr, ctx:
  {right: imp_uri_str} = get_import expr, ctx
  {exprs: [{value: imp_spec}]} = imp_uri_str

  {left: {value: exported_name}} = get_parent expr, ctx

  uri = await resolve doc, imp_spec
  --- istanbul ignore next ---
  exprs = await pipe uri:
    fake_doc
    async_parse
    ?.then
      fn {exprs}: exprs
      fn: []


  [loc=false] = pipe exprs:
    filter fn expr:
      match expr:
        {left: {type: 'ident', value: exported_name}, op: '='}:
          true
        else:
          false
    map fn {left}:
      doc_range {uri}, left.loc

  match loc:
    false: doc_range doc, expr.loc
    else: loc


# TODO same as in provide-refs.fnk
keep_refs_at = fn pos:
  filter fn [expr]:
    match expr:
      {type: 'ident'}: is_at_loc expr, pos
      {op: 'import'}: is_at_loc expr, pos
      else: false


# TODO same as in provide-refs.fnk?
as_bindings = fn items:
  pipe items:
    map fn [expr], , ctx:
      match expr:
        {op: 'import'}: expr
        else: find_binding expr, ctx
    # TODO filter fn ? != false
    filter fn expr: expr != false



as_doc_locs = fn doc, async_parse:
  map fn expr, , ctx:
    match expr:
      {op: 'import'}:
        import_link doc, expr

      is_imported ?, ctx:
        imported_decl async_parse, doc, expr, ctx

      else:
        doc_range doc, expr.loc



def_provider = fn async_parse: fn doc, vspos:
  ast = await async_parse doc
  pos = to_larix_pos vspos

  pipe [ast]:
    walk
    with_ctx {}
    add_parents
    add_binding_refs
    keep_refs_at pos
    as_bindings
    as_doc_locs doc, async_parse
    parallel



add_definition_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerDefinitionProvider
    'fink'
    {provideDefinition: def_provider async_parse}

  subscriptions.push subscr

