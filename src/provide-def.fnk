{languages, Uri, Location, workspace} = import 'vscode'

{decode} = import '@fink/std-lib/str.fnk'
{new, set_props} = import '@fink/js-interop/reflect.fnk'

{get_decls, decls_by_scope, get_idents, get_exprs_from_loc, ref_loc} = import './traverse.fnk'
{to_larix_pos, doc_range, range} = import './loc.fnk'



find_decls_for_ident = fn ast, ident:
  idents = get_idents ast
  scopes = decls_by_scope idents
  [decl] = get_decls ident, scopes
  [decl]



find_decls_by_loc = fn ast, loc:
  pipe get_exprs_from_loc ast, loc:
    map node:
      delcs = match node:
        {expr: {type: 'ident'}}:
          find_decls_for_ident ast, node

        {expr: {type: 'jsx:elem'}}:
          find_decls_for_ident ast, node

        {parent: {parent: {expr: {op: 'import'}}}}:
          [node.parent.parent]

        else: []

      ...delcs


resolve = fn doc, path:
  paths = list:
    Uri.joinPath doc.uri, '..', '${path}'
    Uri.joinPath doc.uri, '..', '${path}.fnk'
    Uri.joinPath doc.uri, '..', '${path}/index.fnk'


  pipe paths:
    # istanbul ignore next
    find uri:
      [err, stat] = try: await workspace.fs.stat uri
      not err and stat.type == 1



import_link = fn doc, import_expr:
  {right: {exprs: [path]}} = import_expr
  origin_range = range path.loc

  target = await resolve doc, path.value

  target_range = range {start: {line: 1, column: 1}, end: {line: 1, column: 1}}

  link = new Location, target, target_range

  set_props link, {originSelectionRange: origin_range}
  link




is_imported_decl = fn decl:
  match decl:
    {parent: {parent: {parent: {expr: {op: '=', right: {op: 'import'}}}}}}: true
    else: false



fake_doc = fn uri:
  dict:
    uri
    version: '0'
    getText: fn:
      data = await workspace.fs.readFile uri
      decode data, 'utf-8'



imported_decl = fn async_parse, doc, decl:
  {right: imp_uri_str} = decl.parent.parent.parent.expr.right
  {exprs: [{value: imp_spec}]} = imp_uri_str

  {left: {value: exported_name}} = decl.parent.expr

  uri = await resolve doc, imp_spec
  ast = await async_parse fake_doc uri

  [expr] = pipe ast.exprs:
    filter expr:
      match expr:
        {left: {type: 'ident', value: exported_name}, op: '='}:
          true
        else:
          false
    map {left}: left

  doc_range {uri}, ref_loc expr



def_provider = fn async_parse: fn doc, pos:
  ast = await async_parse doc

  locs = pipe find_decls_by_loc ast, to_larix_pos pos:
    map decl:
      match decl:
        {expr: {op: 'import'}}:
          import_link doc, decl.expr

        is_imported_decl ?:
          imported_decl async_parse, doc, decl


        else:
          doc_range doc, ref_loc decl.expr

    # TODO: use std-lib async parallel or sequential
    fold link, out=[]:
      [...out, await link]

  await locs



add_definition_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerDefinitionProvider
    'fink'
    {provideDefinition: def_provider async_parse}

  subscriptions.push subscr

