{languages, DocumentHighlight, DocumentHighlightKind} = import 'vscode'

{
  decls_by_scope, get_idents, get_decls, get_refs, get_refs_for_decl
  get_exprs_from_loc, ref_loc
} = import './traverse'
{to_larix_pos, range} = import './loc'



find_refs_for_decl = fn all_refs, decl:
  pipe get_refs_for_decl all_refs, decl:
    map {idents}:
      ...idents



find_refs_by_ident = fn ast, ident:
  idents = get_idents ast
  scopes = decls_by_scope idents
  all_refs = get_refs idents, scopes

  # all other decls are shaddowed by ident
  [decl] = get_decls ident, scopes
  [...find_refs_for_decl all_refs, decl]



get_ref_highlights = fn ast, ident:
  refs = find_refs_by_ident ast, ident

  [...locs] = pipe refs:
    map {decl, expr}:
      kind = match decl:
        true: DocumentHighlightKind.Write
        else: DocumentHighlightKind.Read

      new DocumentHighlight
        range ref_loc expr
        kind
  locs



provide_highlights = fn async_parse: fn doc, pos:
  ast = await async_parse doc
  loc = to_larix_pos pos

  pipe get_exprs_from_loc ast, loc:
    map node:
      {parent} = node

      highlights = match node:
        {expr: {type: 'ident'}}:
          get_ref_highlights ast, node

        {expr: {type: 'jsx-elem'}}:
          get_ref_highlights ast, node

        {expr: {type: 'string:text'}}:
          list:
            new DocumentHighlight
              range parent.expr.loc
              DocumentHighlightKind.Text

        else:
          []

      ...highlights
    [...?]



add_highlights_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerDocumentHighlightProvider
    'fink'
    {provideDocumentHighlights: provide_highlights async_parse}

  subscriptions.push subscr

