{languages, DocumentHighlight, DocumentHighlightKind} = import 'vscode'
{new} = import '@fink/js-interop/reflect.fnk'
{fold_ac, map, filter, flatten} = import '@fink/std-lib//iter.fnk'

{to_larix_pos, range, is_at_loc} = import './loc.fnk'

{walk} = import '@fink/larix/ast/traverse.fnk'
{find_binding, add_parents, add_binding_refs, get_expr_id, is_binding_ident} = import '@fink/larix/ast/analyze.fnk'


# TODO same as in provide-refs.fnk
keep_refs_at = fn pos:
  filter fn [expr]:
    match expr:
      {type: 'ident'}: is_at_loc expr, pos
      {type: 'string'}: is_at_loc expr, pos
      else: false



as_bindings = map fn [expr], , ctx:
  binding = find_binding expr, ctx
  match binding:
    false: expr
    else: binding




as_highlights = fn items:
  [bindings, ctx] = pipe items:
    fold_ac [], {}, fn binding, out, , ctx:
      [[...out, binding], , ctx]

  pipe bindings:
    map fn binding:
      match binding:
        {type: 'string'}:
          [binding]
        else:
          {refs: {(get_expr_id binding): refs}} = ctx
          [binding, ...refs]

    flatten

    map fn expr:
      kind = match expr:
        {type: 'string'}: DocumentHighlightKind.Text
        is_binding_ident ?, ctx: DocumentHighlightKind.Write
        else: DocumentHighlightKind.Read

      new
        DocumentHighlight
        range expr.loc
        kind



provide_highlights = fn async_parse: fn doc, vspos:
  ast = await async_parse doc

  pos = to_larix_pos vspos

  [...highlights] = pipe ast:
    walk [?]
    add_parents
    add_binding_refs
    keep_refs_at pos
    as_bindings
    as_highlights

  highlights




add_highlights_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerDocumentHighlightProvider
    'fink'
    {provideDocumentHighlights: provide_highlights async_parse}

  subscriptions.push subscr

