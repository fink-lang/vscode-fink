{languages, SemanticTokensLegend, SemanticTokensBuilder} = import 'vscode'
{length} = import '@fink/std-lib/iter.fnk'
{new} = import '@fink/js-interop/reflect.fnk'

{walk} = import '@fink/larix/ast/traverse.fnk'
{add_parents} = import '@fink/larix/ast/analyze.fnk'



token_types = ['function', 'string', 'variable']
token_modifiers = []
sem_token_legend = new SemanticTokensLegend, token_types, token_modifiers



get_callee = fn node:
  match node:
    {type: 'ident'}:
      node
    {type: 'member'}:
      get_callee node.right
    else:
      node



add_call_tokens = fn expr, builder:
  callee = get_callee expr.callee
  match callee:
    {type: 'ident'}:
      {value, loc: {start}} = callee
      ident_len = length value
      builder.push start.line - 1, start.column, ident_len, 0

    --- istanbul ignore else ---
    {type: 'group'}:
      {loc: {start, end}} = callee
      builder.push start.line - 1, start.column, 1, 0
      builder.push end.line - 1, end.column - 1, 1, 0



add_prop_tokens = fn prop, builder:
  match prop:
    {left: {type: 'ident'}, right: {type: 'assign'}}:
      false

    --- istanbul ignore else ---
    {left: {type: 'ident'}, right: ? != prop.left}:
      {value, loc: {start}} = prop.left
      key_len = length value
      builder.push start.line - 1, start.column, key_len, 2, 0



get_tokens = fn {errors, ...ast}:
  builder = new SemanticTokensBuilder, sem_token_legend

  pipe ast:
    walk [?]
    add_parents
    fold [expr], , , ctx={}:
      match expr:
        {type: 'call'}: add_call_tokens expr, builder
        {type: 'rec:kv'}: add_prop_tokens expr, builder
      [builder, , ctx]

  list:
    builder.build _
    errors


provide_sem_tokens = fn async_parse: fn doc:
  parsed = await async_parse doc
  [tokens] = get_tokens parsed
  tokens



add_sem_tokens_provider = fn {subscriptions}, async_parse:

  subscr = languages.registerDocumentSemanticTokensProvider
    'fink'
    {provideDocumentSemanticTokens: provide_sem_tokens async_parse}
    sem_token_legend

  subscriptions.push subscr
