{describe, it, expect, mock, mock_fn} = import '@fink/jest'
{was_called, was_called_with, any} = import '@fink/jest'


mock
  'vscode'
  fn: dict:
    IndentAction: {IndentOutdent: 'test-indent-outdent'}
    SemanticTokensLegend: mock_fn ()
    SnippetString: mock_fn ()
    MarkdownString: mock_fn fn: dict:
      appendCodeblock: mock_fn ()

    languages: dict:
      setLanguageConfiguration: mock_fn ()
      registerDocumentSemanticTokensProvider: mock_fn ()
      registerDocumentHighlightProvider: mock_fn ()
      registerCompletionItemProvider: mock_fn ()
      registerReferenceProvider: mock_fn ()
      registerDefinitionProvider: mock_fn ()
      createDiagnosticCollection: mock_fn ()

    workspace: dict:
      findFiles: mock_fn fn: []
      onDidChangeTextDocument: mock_fn ()
      onDidOpenTextDocument: mock_fn ()
      onDidCloseTextDocument: mock_fn ()

  {virtual: true}


{languages} = import 'vscode'
{activate} = import './extension'
{object} = import './js-compat'


describe 'extension', fn:

  it 'activates', fn:
    ctx = dict:
      subscriptions: dict:
        push: mock_fn ()

    activate ctx

    expect
      languages.setLanguageConfiguration
      was_called_with 'jsx', any object

    expect
      languages.setLanguageConfiguration
      was_called_with 'jsx-attr', any object

    expect
      languages.setLanguageConfiguration
      was_called_with 'fink', any object

    expect
      languages.registerDocumentSemanticTokensProvider
      was_called

    expect
      languages.registerDocumentHighlightProvider
      was_called

    expect
      languages.registerCompletionItemProvider
      was_called

    expect
      languages.registerDefinitionProvider
      was_called_with 'fink', any object

    expect
      languages.registerReferenceProvider
      was_called_with 'fink', any object
