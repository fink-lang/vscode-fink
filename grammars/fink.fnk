{rx} = import './utils.fnk'


lang = rec:
  name: 'fink'
  scopeName: 'source.fink'
  fileTypes: ['fnk']

  patterns: seq:
    {include: 'source.jsx.fink'}

    {include: '#comments'}

    {include: '#block_like'}

    {include: '#language_constant'}

    {include: '#operators'}

    {include: '#number'}

    {include: '#regex'}
    {include: '#string'}

    {include: '#array'}
    {include: '#object'}

    {include: '#variable'}

    rec:
      match: rx','
      name: 'meta.delimiter.comma.fink'

  repository: rec:

    comments: rec:
      patterns: seq:
        rec:
          name: 'comment.line.hash.fink'
          match: rx'#.*$'

        rec:
          name: 'comment.block.documentation.fink'
          begin: rx'(---)'
          end: rx'(---)$'

          beginCaptures: rec:
            '1': {name: 'punctuation.definition.comment.begin.fink'}

          endCaptures: rec:
            '0': {name: 'punctuation.definition.comment.end.fink'}

          patterns: seq:
            {include: '#comment_content'}


    comment_content: rec:
      patterns: seq:
        rec:
          name: 'meta.embedded.block.fink'
          begin: '(```)'
          end: '(```)'
          patterns: seq:
            {include: '$base'}


    block_like: rec:
      patterns: seq:
        rec:
          begin: rx'
            \b(
              fn|pipe|
              match|fold|unfold|map|filter|while|until|
              else|
              try|
              list|seq|dict|rec
            )\b'
          end: '(:)'

          contentName: 'meta.function.parameters'

          beginCaptures: rec:
            '1': {name: 'keyword.control.block.$1.fink'}

          patterns: seq:
            {include: '$base'}


    operators: rec:
      patterns: seq:
        rec:
          match: rx'(?<!\.)\s*+\b(import)\b'
          captures: rec:
            '1': {name: 'keyword.control.module.$1.fink'}

        rec:
          match: rx'(?<!\.)\s*+\b(await|throw)\b'
          captures: rec:
            '1': {name: 'keyword.control.flow.$1.fink'}

        rec:
          match: rx'(\b(not|and|or|in)\b)'
          name: 'keyword.operator.logical.fink'

        rec:
          match: rx'=(?!(=))'
          name: 'keyword.operator.assignment.fink'

        rec:
          match: rx'<=|>=|<|>'
          name: 'keyword.operator.relational.fink'

        rec:
          match: rx'==|!='
          name: 'keyword.operator.comparison.fink'

        rec:
          match: rx'-|\+|%|\*|/|\^'
          name: 'keyword.operator.arithmetic.fink'

        rec:
          match: rx'\?' # TODO should this be surrounded by \b
          name: 'keyword.control.partial.fink'

        rec:
          match: rx'\|'
          name: 'keyword.control.pipe.fink'

        rec:
          match: rx'\b_\b'
          name: 'keyword.control.empty.fink'

        rec:
          match: rx'(?<!\.)(\.)(\w+?)\b(?![:(])'
          captures: rec:
            '1': {name: 'punctuation.accessor.fink'}
            '2': {name: 'meta.object-literal.key.fink'}


    number: rec:
      patterns: seq:
        rec:
          match: rx'
            \s*+
            (
              (?:\B[-+])?
              (?:
                \b0[bB][_0-1]*
                |
                \b0[oO][_0-7]*
                |
                \b0[xX][_0-9a-fA-F]*
                |
                (
                  \B\.[_0-9]+
                  |
                  \b[_0-9]+
                  (\.[_0-9]*)?
                )
                ([eE][-+]?[_0-9]+)?
              )
            )
            (n\b)?'

          captures: rec:
            '1': {name: 'constant.numeric.fink'}
            '5': {name: 'constant.numeric.bigint.fink'}


    variable: rec:
      patterns: seq:
        rec:
          match: rx'\b(\w+?)\b'
          captures: rec:
            '1': {name: 'variable.other.constant.fink'}


    array: rec:
      name: 'meta.array-literal.fink'
      begin: rx'\['
      end: rx'\]'
      patterns: seq:
        {include: '$base'}


    obj_delimited: rec:
      name: 'meta.object-literal.fink'
      begin: rx'\{'
      end: rx'\}'

      patterns: seq:
        rec:
          name: 'meta.object.prop.shorthand'
          match: rx'(\w+)\s*(?=,|\}|$)'
          captures: rec:
            '1': {name: 'variable.other.constant.fink'}

        rec:
          name: 'meta.object.prop'
          begin: rx'(\w+)\s*:'
          end: rx'(?=,|\}|$)'
          beginCaptures: rec:
            '_1': {name: 'support.type.property-name'}
            '1': {name: 'meta.object-literal.key.fink'}

          patterns: seq:
            {include: '$base'}

        rec:
          name: 'meta.object.prop.with-default'
          begin: rx'(\w+)\s*='
          end: rx'(?=,|\}|$)'
          beginCaptures: rec:
            '1': {name: 'variable.other.constant.fink'}

          patterns: seq:
            {include: '$base'}

        rec:
          name: 'meta.object.member'
          begin: rx'(?=\()'
          end: rx'(?=,|\}|$)'
          patterns: seq:
            rec:
              name: 'meta.object.member.computed-key.fink'
              begin: rx'\('
              end: rx'\)\s*(?=:)'
              patterns: seq:
                {include: '$base'}

            rec:
              begin: rx':'
              end: rx'(?=,|\}|$)'
              patterns: seq:
                {include: '$base'}

        rec:
          name: 'meta.object.member'
          begin: rx'(\.\.\.)'
          end: rx'(?=,|\}|$)'
          beginCaptures: rec:
            '1': {name: 'keyword.operator.spread.fink'}

          patterns: seq:
            {include: '$base'}

        {include: '$base'}


    object: rec:
      patterns: seq:
        {include: '#obj_delimited'}


    string: rec:
      patterns: seq:
        rec:
          name: 'string.quoted.template.fink'
          begin: rx'(\w*)([\'"])'
          end: rx'(\2)'
          beginCaptures: rec:
            '_1': {name: 'entity.name.function.tagged-string.fink'}
            '1': {name: 'entity.name.tag.string.fink'}
            '2': {name: 'punctuation.definition.string.begin.fink'}

          endCaptures: rec:
            '1': {name: 'punctuation.definition.string.end.fink'}

          patterns: seq:
            {include: '#string_content'}


    string_content: rec:
      patterns: seq:
          rec:
            name: 'constant.character.escape.quasi.element.fink'
            begin: rx'\${'
            end: rx'}'

            beginCaptures: rec:
              '0': {name: 'punctuation.definition.template-expression.begin.fink'}
            endCaptures: rec:
              '0': {name: 'punctuation.definition.template-expression.end.fink'}

            patterns: seq:
              {include: '$base'}

          rec:
            name: 'constant.character.escape'
            match: rx'\\[\\\'"nrtbfv0]'

          rec:
            name: 'constant.character.escape'
            match: rx'\\\$\{'

          rec:
            name: 'constant.character.escape'
            match: rx'\\u(({[0-9a-fA-F]+\})|[0-9a-fA-F]{4})'

          rec:
            name: 'constant.character.escape'
            match: rx'\\x[0-9a-fA-F]{2}'

          rec:
            name: 'invalid'
            match: rx'\\.'


    regex: rec:
      patterns: seq:
          rec:
            name: 'string.regexp.fink'
            begin: rx'(rx)([\'"])'
            end: rx'(\2)'

            beginCaptures: rec:
              '1': {name: 'constant.regexp.fink'}
              '_1': {name: 'keyword.operator.wordlike.fink'}
              '2': {name: 'punctuation.definition.regexp.begin.fink'}

            endCaptures: rec:
              '1': {name: 'punctuation.definition.regexp.end.fink'}

            patterns: seq:
              {include: 'source.regexp.fink'}


    language_constant: rec:
      patterns: seq:
        rec:
          match: rx'(?<!\.)\s*+\b(true|false)\b'
          captures: rec:
            '1': {name: 'constant.language.boolean.$1.fink'}
