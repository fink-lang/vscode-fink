{
	"name": "fink",
	"scopeName": "source.fink",
	"fileTypes": ["fnk"],

	"patterns": [
		{"include": "source.jsx.fink"},
		{"include": "#dict"},

		{"include": "#regex"},

		{"include": "#comments"},

		{"include": "#block-like"},
		{"include": "#function-call"},

		{"include": "#language-constant"},

		{"include": "#operators"},

		{"include": "#number"},
		{"include": "#string"},
		{"include": "#array"},
		{"include": "#object"},

		{"include": "#variable"},
		{
			"match": ",",
			"name": "meta.delimiter.comma.fink"
		}
	],

	"repository": {

		"comments": {
			"patterns": [
				{
					"name": "comment.line.hash.fink",
					"match": "#.*$"
				},
				{
					"name": "comment.block.documentation.fink",
					"begin": "^\\s*(---)$",
					"end": "^\\s*(---)$",
					"beginCaptures": {
						"1": {"name": "punctuation.definition.comment.begin.fink"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.comment.end.fink"}
					},
					"patterns": [
						{"include": "#comment-content"}
					]
				}
			]
		},
		"comment-content": {
      "patterns": [
				{
					"name": "meta.embedded.block.fink",
					"begin": "(```)",
					"end": "(```)",
					"patterns": [
						{"include": "$base"}
					]
        }
      ]
		},

		"block-like": {
			"patterns": [
				{
					"begin": "\\b(fn|match|fold|unfold|map|filter|while|find|pipe|else|try|list|dict)\\b",
					"end": "(:)",
					"contentName": "meta.function.parameters",
					"beginCaptures": {
						"1": {"name": "keyword.control.block.$1.fink"}
					},
					"patterns": [
						{"include": "$base"}
					]
				}
			]
		},

		"operators": {
			"patterns": [
				{
          "match": "(?<!\\.)\\s*+\\b(import)\\b",
          "captures": {
            "1": {"name": "keyword.control.module.$1.fink"}
          }
				},
				{
          "match": "(?<!\\.)\\s*+\\b(await|throw)\\b",
          "captures": {
            "1": {"name": "keyword.control.flow.$1.fink"}
          }
				},
				{
          "match": "(?<!\\.)\\s*+\\b(new)\\b",
          "captures": {
            "1": {"name": "keyword.operator.$1.fink"}
          }
				},
				{
          "match": "!|&&|\\|\\||(\\b(not|and|or|in)\\b)",
          "name": "keyword.operator.logical.fink"
				},
				{
          "match": "=(?!(=))",
          "name": "keyword.operator.assignment.fink"
				},
				{
          "match": "<=|>=|<>|<|>",
          "name": "keyword.operator.relational.fink"
				},
				{
          "match": "==|!=",
          "name": "keyword.operator.comparison.fink"
				},
				{
          "match": "-|\\+|%|\\*|/|\\^",
          "name": "keyword.operator.arithmetic.fink"
				},
				{
          "match": "\\?",
          "name": "keyword.control.partial.fink"
				},
				{
					"match": "(?<!\\.)(\\.)(\\w+?)\\b(?![:(])",
					"captures": {
						"1": {"name": "punctuation.accessor.fink"},
						"2": {"name": "string.unquoted.fink"}
					}
				}
			]
		},

		"number": {
			"patterns": [
        {
          "match": "\\s*+((?:\\B[-+])?(?:\\b0[bB][_0-1]*|\\b0[oO][_0-7]*|\\b0[xX][_0-9a-fA-F]*|(\\B\\.[_0-9]+|\\b[0-9]+(\\.[_0-9]*)?)([eE][-+]?[_0-9]+)?))(n\\b)?",
          "captures": {
            "1": {"name": "constant.numeric.fink"},
            "5": {"name": "constant.numeric.bigint.fink"}
          }
        }
      ]
		},

		"variable": {
      "patterns": [
        {
          "match": "\\b(\\w+?)\\b",
          "captures": {
            "1": {"name": "variable.other.constant.fink"}
          }
        }
      ]
		},

		"function-call": {
			"patterns": [
				{
					"name": "meta.function-call.fink",
					"begin": "\\b(\\w*+)\\s*+(\\()",
					"end": "\\)",
					"contentName": "meta.function.parameters",
					"beginCaptures": {
						"1": {"name": "entity.name.function.fink"},
						"2": {"name": "meta.brace.round"}
					},
					"endCaptures": {
						"0": {"name": "meta.brace.round"}
					},
					"patterns": [
						{"include": "$base"}
					]
				},
				{
					"name": "meta.function-call.op-less.fink",
					"match": "\\b((?!and|or|not|in)\\b)(\\w+)[ ](?![-+*/=|&><%^#}:]|!=|\\b(and|or|in)\\b|$)",
					"captures": {
						"2": {"name": "entity.name.function.fink"},
						"3": {"name": "keyword.operator.call.fink"}
					}
				}
			]
		},

		"array": {
			"name": "meta.array-literal.fink",
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{"include": "$base"}
			]
		},

		"obj-key-block": {
			"name": "meta.object.member",
			"begin": "(^[ ]{1,})(\\w+?)(?=:.*$)",
			"beginCaptures": {
				"2": {"name": "string.unquoted"}
			},
			"while": "(?=^$|\\1[ ]{1,}(?! ))",
			"end": "\\}",
			"contentName": "meta.block.obj-val.fink",
			"patterns": [
				{"include": "$dict"},
				{"include": "$base"}
			]
		},

		"dict": {
			"begin": "(^[ ]{1,}(?! ))(?=.*\\bdict:$)",
			"while": "(?=^$|\\1[ ]{1,}(?! ))",
			"contentName": "meta.block.dict.fink",
			"patterns": [
				{"include": "#obj-key-block"},
				{"include": "$base"}
			]
		},

		"obj-delimited": {
			"name": "meta.object-literal.fink",
			"begin": "\\{",
			"end": "\\}",

			"patterns": [
				{"include": "#obj-key-block"},

				{
					"name": "meta.object.member.shorthand",
					"match": "(\\w+)\\s*(?=,|\\}|$)",
					"captures": {
						"1": {"name": "variable.other.constant.fink"}
					}
				},

				{
					"name": "meta.object.member",
					"begin": "(\\w+)\\s*:",
					"end": "(?=,|\\}|$)",
					"beginCaptures": {
						"1": {"name": "string.unquoted"}
					},
					"patterns": [
						{"include": "$base"}
					]
				},

				{
					"name": "meta.object.member",
					"begin": "(\\w+)\\s*=",
					"end": "(?=,|\\}|$)",
					"beginCaptures": {
						"1": {"name": "variable.other.constant.fink"}
					},
					"patterns": [
						{"include": "$base"}
					]
				},

				{
					"name": "meta.object.member",
					"begin": "(?=\\()",
					"end": "(?=,|\\}|$)",
					"patterns": [
						{
							"name": "meta.object.member.computed-key",
							"begin": "\\(",
							"end": "\\)\\s*(?=:)",
							"patterns": [
								{"include": "$base"}
							]
						},
						{
							"begin": ":",
							"end": "(?=,|\\}|$)",
							"patterns": [
								{"include": "$base"}
							]
						}
					]
				},

				{
					"name": "meta.object.member",
					"begin": "(\\.\\.\\.)",
					"end": "(?=,|\\}|$)",
					"beginCaptures": {
						"1": {"name": "keyword.operator.spread.fink"}
					},
					"patterns": [
						{"include": "$base"}
					]
				},
				{"include": "$base"}
			]
		},
		"object": {
			"patterns": [
				{"include": "#obj-delimited"},
				{"include": "#dict"}
			]
		},
		"string": {
			"patterns": [
				{
					"name": "string.quoted.template.fink",
					"begin": "(\\w*)(`)(?!``)",
					"end": "`",
					"beginCaptures": {
						"1" : {"name": "entity.name.function.tagged-string.fink"},
						"2": {"name": "punctuation.definition.string.begin.fink"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.string.end.fink"}
					},
					"patterns": [
						{"include": "#string-content"}
					]
				},
				{
					"name": "string.quoted.template.fink",
					"begin": "(\\w*)(')",
					"end": "'",
					"beginCaptures": {
						"1" : {"name": "entity.name.function.tagged-string.fink"},
						"2": {"name": "punctuation.definition.string.begin.fink"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.string.end.fink"}
					},
					"patterns": [
						{"include": "#string-content"}
					]
				},
				{
					"name": "string.quoted.template.fink",
					"begin": "(\\w*)(\")",
					"end": "\"",
					"beginCaptures": {
						"1" : {"name": "entity.name.function.tagged-string.fink"},
						"2": {"name": "punctuation.definition.string.begin.fink"}
					},
					"endCaptures": {
						"0": {"name": "punctuation.definition.string.end.fink"}
					},
					"patterns": [
						{"include": "#string-content"}
					]
				}
			]
		},
		"string-content": {
      "patterns": [
				{
          "name": "constant.character.escape.quasi.element.fink",
					"begin": "\\${",
					"end": "}",
					"patterns": [
						{"include": "$base"}
					]
        },
        {
          "name": "constant.character.escape",
          "match": "\\\\[`'\"\\\\nrtbfv0]"
				},
				{
          "name": "constant.character.escape",
          "match": "\\\\\\$"
        },
        {
          "name": "constant.character.escape",
          "match": "\\\\u(({[0-9a-fA-F]+\\})|[0-9a-fA-F]{4})"
        },
        {
          "name": "constant.character.escape",
          "match": "\\\\x[0-9a-fA-F]{2}"
        }
      ]
		},

		"regex": {
      "patterns": [
				{
          "name": "string.regexp.fink",
          "begin": "(rx?)(/)",
          "end": "(/)([gimyu]*)",
          "beginCaptures": {
						"1": {"name": "keyword.control.fink"},
						"2": {"name": "punctuation.definition.regexp.begin.fink"}
          },
          "endCaptures": {
            "1": {"name": "punctuation.definition.regexp.end.fink"},
            "2": {"name": "keyword.other.fink"}
          },
          "patterns": [
            {"include": "source.regexp.fink"}
          ]
				}
      ]
    },

		"language-constant": {
      "patterns": [
        {
          "match": "(?<!\\.)\\s*+\\b(true|false|null)\\b",
          "captures": {
            "1": {"name": "constant.language.boolean.$1.fink"}
          }
        }
      ]
		}
	}
}