{rx} = import './utils.fnk'


lang = rec:
  name: 'JSX'
  'scopeName': 'source.jsx.fink'
  'fileTypes': []

  patterns: list:
    {include: '#jsx'}

  'repository': rec:
    'jsx': rec:
      patterns: list:
        rec:
          begin: rx'(?=<[$_\p{L}]|<\s*>)'
          end: rx'(?=.)'
          applyEndPatternLast: 1
          patterns: list:
            {include: '#jsx-tag-element-name'}


    'jsx-tag-element-name': rec:
      patterns: list:
        rec:
          comment: 'JSX Fragment'
          name: 'meta.tag.jsx'
          contentName: 'meta.embedded.jsx.attr.fink'
          begin: rx'\s*+(<)\s*(?=>)'
          end: rx'(?<=</)(>)'
          beginCaptures: rec:
            '1': {name: 'punctuation.definition.tag.jsx'}

          endCaptures: rec:
            '1': {name: 'punctuation.definition.tag.jsx'}

          patterns: list:
            {include: '#jsx-tag-termination'}


        rec:
          comment: 'Tags that end > are trapped in #jsx-tag-termination'
          name: 'meta.tag.jsx'
          contentName: 'meta.embedded.jsx.attr.fink'
          begin: rx'
            \s*+(<)
            (
              (\p{Ll}[\p{Ll}0-9]*)
              |
              (
                (?:
                  [$_\p{L}\p{Nl}]
                  [$_\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}-]*?
                  :
                )
                ?+
                (?:
                  [$_\p{L}\p{Nl}]
                  (?:
                    [$_\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}\.-]
                    (?<!\.\.)
                  )*+
                )+
              )
            )
            (?=[ />\s])
            (?![:])
            (?<!\.|:)'

          end: rx'
            \s*(?<=</)
            ((\4)|\2)
            (>)
            |(/>)
            |((?<=</)[\S ]*?)
            >'

          beginCaptures: rec:
            '1': {name: 'punctuation.definition.tag.jsx'}
            '2': {name: 'entity.name.tag.open.jsx'}
            '4': {name: 'support.class.component.open.jsx'}

          endCaptures: rec:
            '1': {name: 'entity.name.tag.close.jsx.fink'}
            '2': {name: 'support.class.component.close.jsx'}
            '3': {name: 'punctuation.definition.tag.jsx'}
            '4': {name: 'punctuation.definition.tag.jsx'}
            '5': {name: 'invalid.illegal.termination.jsx'}

          patterns: list:
            {include: '#jsx-tag-termination'}
            {include: '#jsx-tag-attributes'}


    'jsx-tag-termination': rec:
      patterns: list:
        rec:
          comment: 'uses non consuming search for </ in </tag>'
          contentName: 'meta.embedded.jsx.fink'
          begin: rx'(>)'
          end: rx'(</)'
          beginCaptures: rec:
            '0': {name: 'punctuation.definition.tag.jsx'}
            '1': {name: 'JSXStartTagEnd'}

          endCaptures: rec:
            '0': {name: 'punctuation.definition.tag.jsx'}
            '1': {name: 'JSXEndTagStart'}

          patterns: list:
            {include: '#jsx-evaluated-code'}
            {include: '#jsx-entities'}
            {include: '#jsx-tag-element-name'}


    'jsx-tag-attributes': rec:
      patterns: list:
        {include: '#jsx-attribute-name'}
        {include: '#jsx-assignment'}
        {include: '#jsx-evaluated-code'}
        {include: '#jsx-tag-element-name'}
        {include: '#jsx-fink-spread-attr'}


    'jsx-fink-spread-attr': rec:
      patterns: list:
        rec:
          comment: 'spread attribute'
          begin: rx'(?<!\.)\.\.\.'
          end: rx'(?=---|#|\s|>|/>)'
          name: 'keyword.operator.spread.jsx'
          patterns: list:
            {include: 'source.fink'}


    'jsx-attribute-name': rec:
      patterns: list:
        rec:
          comment: 'look for attribute name'
          match: rx'
            (?<!\S)
            (
              [$_\p{L}]
              (?:
                [$.\p{L}\p{Mn}\p{Mc}\p{Nd}\p{Nl}\p{Pc}-]
                (?<!\.\.)
              )*+
            )
            (?<!\.)
            (?=---|#|=|\s|>|/>)'
          captures: rec:
            '0': {name: 'entity.other.attribute-name.jsx'}


    'jsx-assignment': rec:
      patterns: list:
        rec:
          comment: 'look for attribute assignment'
          name: 'keyword.operator.assignment.jsx'
          # match: rx'=(?=\s*(?:\'|"|{|/\*|<|//|\n))'
          begin: rx'=\s*'
          end: rx'(?=---|#|\s|>|/>)'
          patterns: list:
            {include: '#jsx-evaluated-code'}
            {include: 'source.fink'}


    'jsx-evaluated-code': rec:
      patterns: list:
        rec:
          name: 'meta.embedded.expression.fink'
          contentName: 'source.fink'
          begin: rx'{'
          end: rx'}'
          beginCaptures: rec:
            '0': {name: 'punctuation.section.embedded.begin.jsx'}

          endCaptures: rec:
            '0': {name: 'punctuation.section.embedded.end.jsx'}

          patterns: list:
            {include: 'source.fink'}


    'jsx-entities': rec:
      patterns: list:
        rec:
          comment: 'Embeded HTML entities &blah'
          match: rx'(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)'
          captures: rec:
            '0': {name: 'constant.character.entity.jsx'}
            '1': {name: 'punctuation.definition.entity.jsx'}
            '2': {name: 'entity.name.tag.html.jsx'}
            '3': {name: 'punctuation.definition.entity.jsx'}

        rec:
          comment: 'Entity with & and invalid name'
          match: rx'&\s*+;'
          name: 'invalid.illegal.bad-ampersand.jsx'

